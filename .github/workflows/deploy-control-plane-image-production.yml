on:
  push:
    tags:
      - "v0.*.*"

name: Deploy new control plane image to production
env:
  LINUX_TARGET: x86_64-unknown-linux-musl

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - id: get-version
        run: |
          echo "using version tag ${GITHUB_REF:11}"
          echo ::set-output name=version::${GITHUB_REF:11}

  last_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "standard-cache"
      - name: Test control plane
        run: cargo test -p control-plane

  deploy_control_plane_image_with_egress:
    runs-on: ubuntu-latest
    needs: [get-version, last_test]

    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      - name: Build control plane
        uses: evervault/cargo-static-build@master
        with:
          cmd: cargo build -p control-plane --features enclave,network_egress,release_logging --release --target ${{ env.LINUX_TARGET }}
      - name: Move control-plane binary to root
        run: cp ./target/${{ env.LINUX_TARGET }}/release/control-plane ./control-plane
      - name: Configure Production AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, and tag
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: evervault/control-plane
          VERSION_TAG: ${{ needs.get-version.outputs.version }}
        run: |
          docker build -f ./control-plane/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:egress-enabled-$VERSION_TAG --pull --no-cache .
      - name: Push control plane image to Amazon ECR
        id: push-control-plane
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: evervault/control-plane
          VERSION_TAG: ${{ needs.get-version.outputs.version }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:egress-enabled-$VERSION_TAG

  deploy_control_plane_image_without_egress:
    runs-on: ubuntu-latest
    needs: [get-version, last_test]

    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      - name: Build control plane
        uses: evervault/cargo-static-build@master
        with:
          cmd: cargo build -p control-plane --features enclave,release_logging --release --target ${{ env.LINUX_TARGET }}
      - name: Move control-plane binary to root
        run: cp ./target/${{ env.LINUX_TARGET }}/release/control-plane ./control-plane
      - name: Configure Production AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, and tag
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: evervault/control-plane
          VERSION_TAG: ${{ needs.get-version.outputs.version }}
        run: |
          docker build -f ./control-plane/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:egress-disabled-$VERSION_TAG --pull --no-cache .
      - name: Push control plane image to Amazon ECR
        id: push-control-plane
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: evervault/control-plane
          VERSION_TAG: ${{ needs.get-version.outputs.version }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:egress-disabled-$VERSION_TAG

  mark_control_plane_images_as_latest:
    runs-on: ubuntu-latest
    needs:
      [
        deploy_control_plane_image_with_egress,
        deploy_control_plane_image_without_egress,
        get-version,
      ]
    environment:
      name: production

    steps:
      - name: Configure Production AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push latest tag to image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: evervault/control-plane
          VERSION_TAG: ${{ needs.get-version.outputs.version }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:egress-disabled-$VERSION_TAG
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:egress-enabled-$VERSION_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:egress-disabled-$VERSION_TAG $ECR_REGISTRY/$ECR_REPOSITORY:egress-disabled-latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:egress-enabled-$VERSION_TAG $ECR_REGISTRY/$ECR_REPOSITORY:egress-enabled-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:egress-disabled-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:egress-enabled-latest
