name: Release data-plane binary staging

on:
  push:
    paths:
      - .github/workflows/deploy-data-plane-binary-staging.yml
      - data-plane/**
      - shared/**
    branches:
      - main

env:
  RUST_BACKTRACE: 1
  LINUX_TARGET: x86_64-unknown-linux-musl
  STAGE: staging

jobs:
  get-release-semver:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.get-version.outputs.semver }}
      semver-sha: ${{ steps.get-version.outputs.semver-sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Install MUSL Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      - uses: dtolnay/rust-toolchain@1.79.0
        with:
          targets: x86_64-unknown-linux-musl
      - name: Parse semver from cargo.toml
        id: get-version
        run: |
          SHA_SUFFIX=${GITHUB_SHA::6}
          SEMVER=$(cargo metadata --no-deps | jq -r ".packages[] | select(.name == \"data-plane\") | .version")
          echo "Full semver: ${SEMVER}, appending suffix: ${SHA_SUFFIX}"
          echo "semver=${SEMVER}" >> $GITHUB_OUTPUT
          echo "semver-sha=${SEMVER}-${SHA_SUFFIX}" >> $GITHUB_OUTPUT

  deploy-data-plane-binary:
    runs-on: ubuntu-latest
    needs: [get-release-semver]
    steps:
      - uses: actions/checkout@v2

      - name: Install MUSL Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - uses: dtolnay/rust-toolchain@1.79.0
        with:
          targets: x86_64-unknown-linux-musl

      - name: Configure Staging AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "standard-cache"

      # Egress Enabled, TLS Termination Disabled
      - name: Build data-plane (egress enabled, tls termination disabled)
        run: cargo build -p data-plane --no-default-features --features enclave,network_egress,release_logging --release --target ${{ env.LINUX_TARGET }}
        env:
          RUSTFLAGS: "--cfg staging"

      - name: Upload data-plane to S3 (egress enabled, tls termination disabled)
        env:
          VERSION_TAG: ${{ needs.get-release-semver.outputs.semver-sha }}
          FEATURE_LABEL: egress-enabled/tls-termination-disabled
        run: |
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/${{ env.VERSION_TAG }}/data-plane/${{ env.FEATURE_LABEL }}
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/latest/data-plane/${{ env.FEATURE_LABEL }}

      # Egress Enabled, TLS Termination Enabled
      - name: Build data-plane (egress enabled, tls termination enabled)
        run: cargo build -p data-plane --features enclave,network_egress,release_logging --release --target ${{ env.LINUX_TARGET }}
        env:
          RUSTFLAGS: "--cfg staging"

      - name: Upload data-plane to S3 (egress enabled, tls termination enabled)
        env:
          VERSION_TAG: ${{ needs.get-release-semver.outputs.semver-sha }}
          FEATURE_LABEL: egress-enabled/tls-termination-enabled
        run: |
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/${{ env.VERSION_TAG }}/data-plane/${{ env.FEATURE_LABEL }}
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/latest/data-plane/${{ env.FEATURE_LABEL }}

      # Egress Disabled, TLS Termination Disabled
      - name: Build data-plane (egress disabled, tls termination disabled)
        run: cargo build -p data-plane --no-default-features --features enclave,release_logging --release --target ${{ env.LINUX_TARGET }}
        env:
          RUSTFLAGS: "--cfg staging"

      - name: Upload data-plane to S3 (egress disabled, tls termination disabled)
        env:
          VERSION_TAG: ${{ needs.get-release-semver.outputs.semver-sha }}
          FEATURE_LABEL: egress-disabled/tls-termination-disabled
        run: |
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/${{ env.VERSION_TAG }}/data-plane/${{ env.FEATURE_LABEL }}
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/latest/data-plane/${{ env.FEATURE_LABEL }}

      # Egress Disabled, TLS Termination Enabled
      - name: Build data-plane (egress disabled, tls termination enabled)
        run: cargo build -p data-plane --features enclave,release_logging --release --target ${{ env.LINUX_TARGET }}
        env:
          RUSTFLAGS: "--cfg staging"

      - name: Upload data-plane to S3 (egress disabled, tls termination enabled)
        env:
          VERSION_TAG: ${{ needs.get-release-semver.outputs.semver-sha }}
          FEATURE_LABEL: egress-disabled/tls-termination-enabled
        run: |
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/${{ env.VERSION_TAG }}/data-plane/${{ env.FEATURE_LABEL }}
          aws s3 cp ./target/${{ env.LINUX_TARGET }}/release/data-plane s3://cage-build-assets-${{ env.STAGE }}/runtime/latest/data-plane/${{ env.FEATURE_LABEL }}

      - name: Upload version tag to latest file
        env:
          VERSION_TAG: ${{ needs.get-release-semver.outputs.semver-sha }}
        run: |
          echo "{ \"data-plane\": \"${{ env.VERSION_TAG }}\" }" > latest.txt
          aws s3 cp ./latest.txt s3://cage-build-assets-${{ env.STAGE }}/runtime/latest
          CAGE_BUILD_ASSETS_HOSTNAME=cage-build-assets.evervault.io sh ./scripts/update-runtime-version.sh ${{ env.VERSION_TAG }}
          aws s3 cp scripts/versions s3://cage-build-assets-${{ env.STAGE }}/runtime/versions

      - name: Cloudfront Cache Invalidation
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_STAGING }} --paths "/runtime/latest/data-plane/*" "/runtime/latest" "/runtime/versions"
